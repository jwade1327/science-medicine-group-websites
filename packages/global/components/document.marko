import { getAsObject } from "@parameter1/base-cms-object-path";
import createIdentityBuilder from '../utils/create-identity-builder.js';

$ const {
  site,
  req,
  res,
  nativeX,
  identityX,
  GAM,
  contentMeterState
} = out.global;

$ const { cdn } = res.locals;

$ const { gamDefer, gtmDefer, initOnly } = req.query;

<marko-web-document ...input>
  <@head>
    <link rel="apple-touch-icon" sizes="180x180" href=cdn.public("/apple-touch-icon.png")>
    <link rel="icon" type="image/png" sizes="32x32" href=cdn.public("/favicon-32x32.png")>
    <link rel="icon" type="image/png" sizes="16x16" href=cdn.public("/favicon-16x16.png")>
    <link rel="manifest" href=cdn.public("/site.webmanifest")>

    <marko-web-google-font family="Fira+Sans:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap" />

    <!-- init gtm -->
    <marko-web-gtm-init
      container-id=site.get("gtm.containerId")
      request-frame=true
      target-tag="body"
      on=(gtmDefer || "ready")
    />

    <!-- init p1 website events -->
    <marko-web-identity-x-context|context|>
      <marko-web-p1-events-init
        request-frame=true
        target-tag="body"
        on="load"
        identity-query-builder=createIdentityBuilder(context, identityX.getIdentity(res))
        enable-gam-plugin=true
      />
    </marko-web-identity-x-context>

    <!-- init gam -->
    <marko-web-gam-init
      request-frame=true
      target-tag="body"
      on=(gamDefer || "load")
      delay-ms=500
    />

    <!-- init native-x -->
    <marko-web-native-x-init
      uri=nativeX.getUri()
      enabled=nativeX.isEnabled()
      on="load"
      request-frame=true
      target-tag="body"
    />

    <!-- Add Rudderstack queue -->
    <script>
      rudderanalytics=window.rudderanalytics=[];for(var methods=["load","page","track","identify","alias","group","ready","reset","getAnonymousId","setAnonymousId"],i=0;i<methods.length;i++){var method=methods[i];rudderanalytics[method]=function(a){return function(){rudderanalytics.push([a].concat(Array.prototype.slice.call(arguments)))}}(method)}
    </script>

    <${input.head} />

    <braze-identity-x-identify />

    <!-- start gtm -->
    <marko-web-gtm-start />

    <!-- start gam -->
    <marko-web-gam-enable key-values=getAsObject(out.global, "gamTrackTargeting")>
      <@lazy-load ...site.getAsObject("gam.lazyLoad") />
    </marko-web-gam-enable>
    <marko-web-gam-targeting key-values={ uri: req.path } />
  </@head>
  <@above-wrapper>
    <marko-web-gtm-noscript container-id=site.get("gtm.containerId") />
    <${input.aboveWrapper} />
  </@above-wrapper>
  <@above-container>
    <marko-web-identity-x-context|{ hasUser, user, isEnabled }|>
      <global-site-header-c has-user=hasUser reg-enabled=isEnabled />
      <global-site-menu has-user=hasUser reg-enabled=isEnabled />
      <global-rudderstack />
      <!-- <theme-site-menu has-user=hasUser reg-enabled=isEnabled /> -->
    </marko-web-identity-x-context>
    <${input.aboveContainer} />
  </@above-container>
  <@below-container>
    <${input.belowContainer} />
    <marko-web-identity-x-context|{ hasUser, isEnabled }|>
      <global-site-footer has-user=hasUser reg-enabled=isEnabled />
    </marko-web-identity-x-context>
  </@below-container>
  <@below-wrapper>
    <if(contentMeterState && !contentMeterState.isLoggedIn)>
      <theme-content-meter-block
        views=contentMeterState.views
        view-limit=contentMeterState.viewLimit
        display-overlay=contentMeterState.displayOverlay
        display-gate=contentMeterState.displayGate
      />
    </if>
    <identity-x-newsletter-modal />
  </@below-wrapper>
</marko-web-document>
